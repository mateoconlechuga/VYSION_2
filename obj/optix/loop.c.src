	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_optix_UpdateGUI
_optix_UpdateGUI:
	ld	iy, -917472
	ld	bc, 0
	xor	a, a
	ld	de, (iy)
	lea	hl, iy + 3
	ld	l, (hl)
	ld	iy, (_current_context)
	ld	iy, (iy + 3)
	ld	(iy + 5), de
	ld	(iy + 8), l
	ld	iy, -917472
	ld	(iy), bc
	ld	(iy + 3), a
	call	_os_GetCSC
	ld	hl, (_current_context)
	push	hl
	pop	iy
	ld	iy, (iy + 3)
	ld	(iy + 4), a
	push	hl
	pop	iy
	ld	iy, (iy + 9)
	or	a, a
	sbc	hl, hl
	ld	(iy + 48), hl
	call	_kb_Scan
	ld	iy, (_current_context)
	ld	iy, (iy + 9)
	ld	hl, (iy + 24)
	push	iy
	call	__indcallhl
	pop	hl
	ld	iy, (_current_context)
	ld	hl, (iy + 12)
	push	hl
	call	_optix_HandleShortcuts
	pop	hl
	ld	iy, (_current_context)
	ld	hl, (iy + 12)
	push	hl
	call	_optix_UpdateStack_TopLevel
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_UpdateStack_TopLevel
_optix_UpdateStack_TopLevel:
	ld	hl, -36
	call	__frameset
	ld	hl, (ix + 6)
	ld	bc, 0
	xor	a, a
	ld	de, 0
	ld	(ix + -6), hl
	push	de
	pop	iy
	ld	(ix + -34), a
	ld	(ix + -35), a
	ld	l, a
	ld	(ix + -25), a
	ld	(ix + -36), a
	push	de
	pop	hl
	ld	(ix + -24), bc
	ld	bc, 3
	ld	(ix + -12), de
BB1_1:
	ld	(ix + -31), a
	and	a, 1
	ld	(ix + -18), a
	ld	(ix + -15), hl
	call	__imulu
	push	hl
	pop	de
	ld	(ix + -28), iy
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	ld	(ix + -21), hl
	ld	iy, (ix + -6)
	ld	de, (ix + -12)
	ld	c, 1
	ld	b, c
BB1_2:
	ld	(ix + -3), iy
	ld	iy, (iy)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix + -9), de
	jq	z, BB1_25
	ld	hl, (iy + 24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB1_6
	push	iy
	call	__indcallhl
	ld	c, 1
	ld	b, c
	ld	de, (ix + -9)
	pop	hl
	ld	hl, (ix + -3)
	ld	iy, (hl)
BB1_6:
	ld	a, (iy + 17)
	xor	a, b
	bit	0, a
	jq	nz, BB1_10
	ld	hl, (iy + 27)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB1_10
	push	hl
	call	_optix_RecursiveSetNeedsRedraw
	ld	c, 1
	ld	b, c
	ld	de, (ix + -9)
	pop	hl
	ld	hl, (ix + -3)
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, 5
	jq	nz, BB1_10
	ld	iy, (iy + 30)
	ld	hl, (iy + 27)
	push	hl
	call	_optix_RecursiveSetNeedsRedraw
	ld	c, 1
	ld	b, c
	ld	de, (ix + -9)
	pop	hl
BB1_10:
	ld	a, (ix + -18)
	xor	a, b
	bit	0, a
	jq	nz, BB1_12
	inc	de
	ld	hl, (ix + -21)
	ld	a, b
	ld	bc, 3
	add	hl, bc
	ld	b, a
	ld	(ix + -21), hl
	ld	iy, (ix + -3)
	lea	iy, iy + 3
	jq	BB1_2
BB1_12:
	ld	hl, (ix + -3)
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, 4
	ld	(ix + -3), iy
	jq	nz, BB1_14
	lea	hl, iy + 42
	lea	iy, iy + 14
	ld	de, (ix + -12)
	jq	BB1_16
BB1_14:
	cp	a, 5
	ld	de, (ix + -12)
	ld	c, (ix + -34)
	ld	a, (ix + -35)
	jq	nz, BB1_17
	ld	iy, (iy + 30)
	lea	hl, iy + 42
	lea	iy, iy + 14
BB1_16:
	ld	c, (hl)
	ld	a, (iy)
	ld	(hl), 0
	ld	iy, (ix + -3)
BB1_17:
	ld	l, a
	or	a, c
	and	a, 1
	xor	a, b
	bit	0, a
	ld	(ix + -34), c
	ld	(ix + -35), l
	jq	z, BB1_19
	ld	hl, (ix + -24)
	ld	(ix + -3), hl
	ld	hl, (ix + -15)
	ld	bc, 3
	ld	a, (ix + -31)
	jq	BB1_24
BB1_19:
	ld	a, l
	and	a, 1
	xor	a, b
	ld	l, a
	ld	a, c
	and	a, 1
	xor	a, b
	bit	0, a
	ld	a, (ix + -31)
	jq	nz, BB1_21
	ld	a, b
BB1_21:
	bit	0, l
	ld	iy, (ix + -6)
	jq	nz, BB1_23
	ld	(ix + -36), b
BB1_23:
	ld	(ix + -25), b
	push	de
	pop	hl
	ld	bc, 3
	ld	(ix + -6), iy
BB1_24:
	inc	de
	ld	(ix + -12), de
	ld	iy, (ix + -28)
	add	iy, bc
	lea	de, iy + 0
	ld	iy, (ix + -6)
	lea	iy, iy + 3
	ld	(ix + -6), iy
	push	de
	pop	iy
	ld	de, (ix + -3)
	ld	(ix + -24), de
	jq	BB1_1
BB1_25:
	ld	iy, (_current_context)
	ld	hl, (iy + 3)
	ld	a, (hl)
	ld	c, 1
	xor	a, c
	bit	0, a
	jq	nz, BB1_27
	ld	hl, (ix + 6)
	push	hl
	call	_optix_RecursiveSetNeedsRedraw
	ld	c, 1
	pop	hl
	ld	iy, (_current_context)
BB1_27:
	ld	(ix + -6), iy
	ld	iy, (ix + -6)
	ld	iy, (iy + 9)
	ld	(ix + -34), iy
	ld	hl, (iy + 51)
	ld	iy, (ix + -6)
	ld	de, 5
	ld	(ix + -28), hl
	or	a, a
	sbc	hl, de
	ld	hl, (ix + -15)
	inc	hl
	ld	(ix + -31), hl
	jq	nz, BB1_30
BB1_28:
	ld	hl, (ix + -24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_33
	ld	hl, (iy + 12)
	jq	BB1_38
BB1_30:
	ld	hl, (iy)
	ld	a, (hl)
	xor	a, c
	xor	a, c
	bit	0, a
	jq	nz, BB1_52
	ld	a, c
	ld	bc, 4
	ld	hl, (ix + -28)
	or	a, a
	sbc	hl, bc
	ld	c, a
	jq	z, BB1_52
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	ld	a, (iy + 3)
	ld	iy, (ix + -6)
	xor	a, c
	bit	0, a
	jq	z, BB1_28
	jq	BB1_52
BB1_33:
	ld	a, (hl)
	cp	a, 4
	jq	nz, BB1_35
	push	hl
	pop	iy
	jq	BB1_37
BB1_35:
	cp	a, 5
	ld	hl, 0
	ld	(ix + -12), hl
	jq	nz, BB1_39
	ld	iy, (ix + -24)
	ld	iy, (iy + 30)
BB1_37:
	ld	hl, (iy + 27)
BB1_38:
	ld	(ix + -12), hl
BB1_39:
	ld	hl, (ix + -28)
	ld	de, 5
	or	a, a
	sbc	hl, de
	jq	z, BB1_42
	ld	iy, (ix + -34)
	ld	de, (iy + 54)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_45
BB1_42:
	ld	hl, (ix + -12)
	ld	iy, (hl)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB1_50
	lea	hl, iy + 0
	ld	a, (iy + 16)
	xor	a, c
	ld	iy, (ix + -12)
	lea	iy, iy + 3
	ld	(ix + -12), iy
	bit	0, a
	jq	nz, BB1_42
	ld	iy, (ix + -6)
	jq	BB1_49
BB1_45:
	ld	a, (ix + -25)
	and	a, 1
	xor	a, c
	bit	0, a
	jq	nz, BB1_47
	ld	hl, (ix + -31)
	ld	a, c
	ld	bc, (ix + -9)
	or	a, a
	sbc	hl, bc
	ld	c, a
	jq	nz, BB1_42
BB1_47:
	ld	hl, (ix + -12)
	push	hl
	push	de
	ld	hl, (ix + -28)
	push	hl
	call	_optix_FindNearestElement
	ld	c, 1
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB1_50
	ld	iy, (_current_context)
BB1_49:
	ld	iy, (iy + 3)
	ld	(iy + 3), 0
	push	hl
	call	_optix_SetCurrentSelection
	pop	hl
	ld	c, 1
BB1_50:
	ld	iy, (_current_context)
	ld	iy, (iy + 9)
	ld	hl, (iy + 51)
	ld	de, 5
	or	a, a
	sbc	hl, de
	jq	nz, BB1_52
	ld	hl, 4
	ld	(iy + 51), hl
BB1_52:
	ld	a, (ix + -25)
	and	a, 1
	xor	a, c
	bit	0, a
	jq	nz, BB1_67
	ld	a, (ix + -18)
	xor	a, c
	ld	l, a
	ld	a, (ix + -36)
	and	a, 1
	ld	e, a
	ld	a, l
	or	a, e
	ld	(ix + -6), a
	ld	iy, (ix + 6)
	ld	bc, 0
	ld	de, (ix + -9)
BB1_54:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB1_65
	push	bc
	pop	de
	ld	hl, (iy)
	ld	(ix + -12), hl
	ld	a, (hl)
	cp	a, 4
	jq	nz, BB1_59
	ld	(ix + -18), iy
	ld	hl, (ix + -15)
	push	de
	pop	bc
	or	a, a
	sbc	hl, bc
	ld	l, 1
	jq	z, BB1_58
	ld	l, 0
BB1_58:
	ld	a, (ix + -6)
	and	a, l
	and	a, 1
	ld	iy, (ix + -12)
	jq	BB1_63
BB1_59:
	cp	a, 5
	jq	nz, BB1_64
	ld	(ix + -18), iy
	ld	hl, (ix + -15)
	push	de
	pop	bc
	or	a, a
	sbc	hl, bc
	ld	l, 1
	jq	z, BB1_62
	ld	l, 0
BB1_62:
	ld	a, (ix + -6)
	and	a, l
	ld	hl, (ix + -12)
	push	hl
	pop	iy
	ld	iy, (iy + 30)
	and	a, 1
	ld	(iy + 14), a
	push	hl
	pop	iy
BB1_63:
	ld	(iy + 14), a
	ld	iy, (ix + -18)
BB1_64:
	push	de
	pop	bc
	inc	bc
	lea	iy, iy + 3
	ld	de, (ix + -9)
	jq	BB1_54
BB1_65:
	ld	hl, (ix + -31)
	or	a, a
	sbc	hl, de
	jq	z, BB1_67
	ld	bc, 3
	ld	hl, (ix + -15)
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	lea	hl, iy + 0
	add	hl, de
	ld	(ix + -6), hl
	ld	hl, (ix + -31)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix + -21)
	push	hl
	push	iy
	ld	hl, (ix + -6)
	push	hl
	call	_memmove
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -24)
	ld	iy, (ix + -3)
	ld	(iy + -3), hl
BB1_67:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_UpdateStack
_optix_UpdateStack:
	ld	hl, -6
	call	__frameset
	ld	iy, (ix + 6)
	ld	de, 0
	ld	bc, 3
BB2_1:
	ld	(ix + -3), de
	ex	de, hl
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	(ix + -6), iy
	ld	iy, (iy)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_17
	ld	hl, (iy + 24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_5
	push	iy
	call	__indcallhl
	pop	hl
	ld	hl, (ix + -6)
	ld	iy, (hl)
BB2_5:
	ld	de, (ix + -3)
	ld	bc, 3
	ld	a, (iy + 17)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB2_12
	ld	hl, (iy + 27)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_12
	push	hl
	call	_optix_RecursiveSetNeedsRedraw
	pop	hl
	ld	hl, (ix + -6)
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, 5
	jq	nz, BB2_11
	ld	iy, (iy + 30)
	ld	hl, (iy + 27)
	push	hl
	call	_optix_RecursiveSetNeedsRedraw
	pop	hl
	ld	hl, (ix + -6)
	ld	iy, (hl)
BB2_11:
	ld	de, (ix + -3)
	ld	bc, 3
BB2_12:
	ld	a, (iy + 14)
	ld	l, 1
	xor	a, l
	bit	0, a
	ld	iy, (ix + 6)
	jq	z, BB2_14
BB2_13:
	inc	de
	jq	BB2_1
BB2_14:
	ld	(ix + -3), iy
	push	de
	pop	hl
BB2_15:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_13
	ld	iy, (ix + -3)
	ld	iy, (iy)
	ld	(iy + 14), 0
	dec	hl
	ld	iy, (ix + -3)
	lea	iy, iy + 3
	ld	(ix + -3), iy
	ld	iy, (ix + 6)
	jq	BB2_15
BB2_17:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RenderGUI
_optix_RenderGUI:
	ld	iy, (_current_context)
	ld	hl, (iy + 9)
	push	hl
	call	_optix_RenderCursorBackground
	pop	hl
	ld	iy, (_current_context)
	ld	hl, (iy + 12)
	push	hl
	call	_optix_RenderStack
	pop	hl
	ld	hl, (_current_context)
	push	hl
	pop	iy
	ld	iy, (iy + 3)
	ld	a, (iy + 1)
	push	hl
	pop	iy
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB3_2
	ld	hl, 1
	push	hl
	call	_gfx_Blit
	pop	hl
	ld	iy, (_current_context)
BB3_2:
	ld	iy, (iy + 9)
	ld	hl, (iy + 21)
	push	iy
	call	__indcallhl
	pop	hl
	ld	iy, (_current_context)
	ld	iy, (iy + 3)
	ld	(iy), 0
	ld	(iy + 1), 0
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RenderStack
_optix_RenderStack:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	pop	bc
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB4_1
BB4_8:
	pop	hl
	pop	ix
	ret
BB4_1:
	ld	e, 1
	push	bc
	pop	iy
BB4_2:
	lea	bc, iy + 0
	ld	iy, (iy)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB4_8
	ld	hl, (iy + 21)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB4_7
	ld	(ix + -3), bc
	ld	a, (iy + 17)
	xor	a, e
	bit	0, a
	jq	nz, BB4_6
	lea	de, iy + 0
	ld	iy, (_current_context)
	ld	iy, (iy + 3)
	ld	(iy + 1), 1
	push	de
	pop	iy
BB4_6:
	push	iy
	call	__indcallhl
	pop	hl
	ld	hl, (ix + -3)
	ld	iy, (hl)
	ld	(iy + 17), 0
	push	hl
	pop	bc
	ld	e, 1
BB4_7:
	push	bc
	pop	iy
	lea	iy, iy + 3
	jq	BB4_2
	section	.text,"ax",@progbits

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	__indcallhl
	extern	_kb_Scan
	extern	_memmove
	extern	_optix_SetCurrentSelection
	extern	_optix_HandleShortcuts
	extern	_current_context
	extern	__Unwind_SjLj_Unregister
	extern	_gfx_Blit
	extern	__imulu
	extern	_optix_RenderCursorBackground
	extern	_optix_RecursiveSetNeedsRedraw
	extern	_optix_FindNearestElement
	extern	_os_GetCSC
