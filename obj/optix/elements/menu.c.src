	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_optix_GetMenuOptionWidth
_optix_GetMenuOptionWidth:
	ld	hl, -6
	call	__frameset
	ld	iy, (ix + 6)
	ld	bc, (ix + 12)
	ld	l, (ix + 15)
	ld	h, (ix + 16)
	ld	de, 0
	ld	e, l
	ld	d, h
	push	de
	pop	hl
	call	__idivs
	ld	(ix + -3), hl
	inc	iy
	lea	hl, iy + 0
	call	__irems
	ld	(ix + -6), hl
	ld	hl, (ix + -3)
	call	__imulu
	push	hl
	pop	bc
	ex	de, hl
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	hl, (ix + -6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_2
	ld	iy, 0
BB0_2:
	ld	de, (ix + -3)
	add	iy, de
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_GetMenuOptionHeight
_optix_GetMenuOptionHeight:
	ld	hl, -6
	call	__frameset
	ld	de, (ix + 9)
	ld	a, (ix + 18)
	ld	iy, 0
	ld	iyl, a
	lea	hl, iy + 0
	push	de
	pop	bc
	call	__idivs
	ld	(ix + -3), hl
	ld	hl, (ix + 6)
	ld	bc, (ix + 12)
	call	__idivs
	ld	(ix + -6), hl
	push	de
	pop	bc
	dec	de
	ld	hl, (ix + -3)
	call	__imulu
	push	hl
	pop	bc
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix + -6)
	or	a, a
	sbc	hl, de
	jq	z, BB1_2
	ld	bc, 0
BB1_2:
	ld	a, c
	ld	hl, (ix + -3)
	add	a, l
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_UpdateMenu_default
_optix_UpdateMenu_default:
	ld	hl, -21
	call	__frameset
	ld	iy, (ix + 6)
	ld	de, (iy + 58)
	ld	bc, -1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB2_2
	ld	(iy + 74), de
BB2_2:
	lea	de, iy + 0
	ld	iy, (_current_context)
	ld	iy, (iy + 9)
	ld	hl, (iy + 54)
	or	a, a
	sbc	hl, de
	jq	z, BB2_8
	ld	hl, (ix + 6)
	push	hl
	push	iy
	call	_optix_CheckTransformOverlap
	pop	hl
	pop	hl
	ld	c, 1
	xor	a, c
	bit	0, a
	jq	nz, BB2_5
	ld	hl, (_current_context)
	ld	hl, (hl)
	ld	a, (hl)
	xor	a, c
	bit	0, a
	jq	z, BB2_8
BB2_5:
	ld	de, -1
	ld	iy, (ix + 6)
	ld	a, (iy + 14)
	xor	a, c
	bit	0, a
	jq	nz, BB2_7
	ld	(iy + 61), 1
BB2_7:
	ld	(iy + 58), de
	ld	(iy + 14), 0
	jq	BB2_84
BB2_8:
	ld	hl, -720868
	ld.sis	bc, 1
	ld	iy, (ix + 6)
	ld	(iy + 61), 0
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	call	__sand
	ld	e, 1
	ld	a, l
	xor	a, e
	xor	a, e
	bit	0, a
	jq	nz, BB2_13
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jq	nz, BB2_13
	ld	a, (iy + 77)
	xor	a, e
	bit	0, a
	jq	nz, BB2_12
	ld	(iy + 17), 1
BB2_12:
	ld	(iy + 77), 0
	jq	BB2_20
BB2_13:
	ld	a, (iy + 77)
	xor	a, e
	xor	a, e
	bit	0, a
	jq	nz, BB2_20
	ld	a, (iy + 14)
	xor	a, e
	bit	0, a
	jq	nz, BB2_20
	ld	hl, (iy + 78)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_19
	ld	a, (iy + 84)
	xor	a, e
	bit	0, a
	lea	de, iy + 0
	jq	z, BB2_18
	ld	de, (iy + 81)
BB2_18:
	push	de
	call	__indcallhl
	ld	iy, (ix + 6)
	pop	hl
	ld	c, 1
	ld	e, c
	ld.sis	bc, 1
BB2_19:
	ld	(iy + 77), 1
BB2_20:
	ld	a, (iy + 14)
	xor	a, e
	ld	hl, (_current_context)
	ld	(ix + -3), hl
	ld	hl, (hl)
	ld	l, (hl)
	xor	a, e
	bit	0, a
	jq	nz, BB2_23
	ld	a, l
	xor	a, e
	bit	0, a
	jq	z, BB2_36
	ld	hl, (iy + 74)
	ld	(iy + 58), hl
	ld	(iy + 17), 1
	ld	(iy + 14), 1
	jq	BB2_24
BB2_23:
	ld	(iy + 14), 1
	ld	a, l
	xor	a, e
	bit	0, a
	jq	z, BB2_37
BB2_24:
	lea	de, iy + 0
	ld	iy, (ix + -3)
	ld	iy, (iy + 9)
	ld	hl, (iy + 54)
	or	a, a
	sbc	hl, de
	ld	e, 1
	jq	nz, BB2_74
	ld	iy, (ix + -3)
	ld	iy, (iy + 3)
	ld	a, (iy + 3)
	xor	a, e
	bit	0, a
	jq	nz, BB2_74
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	or	a, a
	jq	z, BB2_74
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	3, a
	ld	(ix + -6), iy
	jq	nz, BB2_56
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, e
	call	__sand
	ld	a, l
	xor	a, e
	bit	0, a
	jq	z, BB2_58
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	bit	1, l
	ld	a, 0
	ld	b, a
	jq	z, BB2_31
	ld	iy, (ix + 6)
	ld	de, (iy + 58)
	ld	bc, (iy + 68)
	push	de
	pop	hl
	call	__irems
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	b, 1
	jq	nz, BB2_85
BB2_31:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	bit	2, l
	jq	z, BB2_70
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	de, (iy + 58)
	inc	de
	ld	bc, (iy + 68)
	push	de
	pop	hl
	call	__irems
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	b, 1
	jq	z, BB2_70
	ld	iy, (ix + 6)
	jq	BB2_34
BB2_36:
	ld	(iy + 14), 1
BB2_37:
	ld	bc, (iy + 68)
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ld	de, 0
	ld	e, l
	ld	d, h
	push	de
	pop	hl
	call	__idivs
	push	hl
	pop	iy
	ld	hl, 1
	call	__irems
	ld	(ix + -9), hl
	ld	(ix + -6), iy
	lea	hl, iy + 0
	ld	(ix + -12), bc
	call	__imulu
	push	hl
	pop	bc
	ex	de, hl
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	ld	hl, (ix + -9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ex	de, hl
	jq	z, BB2_39
	or	a, a
	sbc	hl, hl
BB2_39:
	ld	de, (ix + -6)
	add	hl, de
	ld	(ix + -6), hl
	ld	iy, (ix + 6)
	ld	bc, (iy + 65)
	ld	a, (iy + 9)
	ld	de, 0
	ld	e, a
	push	de
	pop	hl
	call	__idivs
	push	bc
	pop	iy
	dec	iy
	ld	(ix + -9), hl
	call	__imulu
	push	hl
	pop	bc
	ex	de, hl
	lea	de, iy + 0
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_41
	ld	iy, 0
BB2_41:
	ld	bc, (ix + -9)
	add	iy, bc
	ld	(ix + -9), iy
	ld	iy, (ix + -3)
	ld	iy, (iy + 3)
	ld	a, (iy + 3)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB2_51
	ld	(ix + -3), iy
	ld	iy, -720868
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	1, a
	jq	nz, BB2_47
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	2, a
	jq	z, BB2_51
	ld	iy, (ix + 6)
	ld	hl, (iy + 62)
	ld	de, (ix + -12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB2_46
	ld	de, 0
BB2_46:
	ld	(iy + 62), de
	lea	hl, iy + 0
	jq	BB2_50
BB2_47:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	iy, (iy + 62)
	ld	(ix + -21), iy
	ld	bc, (ix + -12)
	add	iy, bc
	ld	(ix + -18), iy
	push	hl
	pop	iy
	ld	hl, (iy + 71)
	ld	(ix + -15), hl
	ex	de, hl
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + -15)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	iy, (ix + -18)
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	call	__setflag
	lea	de, iy + 0
	jq	m, BB2_49
	ld	de, (ix + -21)
BB2_49:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	(iy + 62), de
BB2_50:
	ld	iy, (ix + -3)
	ld	(iy + 3), 0
	push	hl
	pop	iy
	ld	(iy + 17), 1
BB2_51:
	call	_kb_AnyKey
	or	a, a
	jq	z, BB2_53
	ld	a, 0
	jq	BB2_54
BB2_53:
	ld	a, 1
BB2_54:
	ld	bc, 255
	ld	iy, (_current_context)
	ld	hl, (iy + 3)
	lea	de, iy + 0
	and	a, 1
	push	hl
	pop	iy
	ld	(iy + 3), a
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 62)
	ld	(ix + -3), hl
	push	de
	pop	iy
	ld	iy, (iy + 9)
	ld	(ix + -12), iy
	ld	hl, (iy + 4)
	ld	iy, (ix + 6)
	ld	de, (iy + 4)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix + -9)
	call	__iand
	push	hl
	pop	bc
	ex	de, hl
	call	__idivs
	push	hl
	pop	bc
	ld	hl, (iy + 68)
	call	__imulu
	ld	(ix + -9), hl
	ld	iy, (ix + -12)
	ld	hl, (iy + 1)
	ld	iy, (ix + 6)
	ld	de, (iy + 1)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix + -6)
	ld	bc, 65535
	call	__iand
	push	hl
	pop	bc
	ex	de, hl
	call	__idivs
	push	hl
	pop	de
	ld	bc, (ix + -3)
	ld	hl, (ix + -9)
	add	hl, bc
	add	hl, de
	push	hl
	pop	bc
	jq	BB2_75
BB2_56:
	ld	iy, (ix + 6)
	ld	hl, (iy + 58)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_60
	ld	e, 0
	jq	BB2_61
BB2_58:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	de, (iy + 58)
	ld	bc, (iy + 71)
	dec	bc
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB2_65
	ld	l, 0
	jq	BB2_66
BB2_60:
	ld	e, 1
BB2_61:
	ld	bc, (ix + -6)
	ld	a, e
	and	a, 1
	bit	0, e
	ld	de, 0
	jq	nz, BB2_64
	ld	iy, (ix + 6)
	ld	de, (iy + 68)
	ld	bc, (ix + -6)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
BB2_64:
	ld	iy, (ix + 6)
	ld	(iy + 58), de
	push	bc
	pop	iy
BB2_35:
	ld	(iy + 3), 0
	ld	b, a
	jq	BB2_70
BB2_65:
	ld	l, 1
BB2_66:
	ld	a, l
	and	a, 1
	ld	b, a
	bit	0, l
	ld	hl, (ix + -6)
	jq	nz, BB2_69
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 68)
	add	hl, de
	ex	de, hl
BB2_69:
	ld	iy, (ix + 6)
	ld	(iy + 58), de
	ld	iy, (ix + -6)
	ld	(iy + 3), 0
BB2_70:
	ld	iy, (ix + 6)
	ld	a, (iy + 85)
	ld	c, 1
	xor	a, c
	bit	0, a
	jq	nz, BB2_72
	ld	iy, (ix + -3)
	ld	hl, (iy + 12)
	ld	de, (ix + 6)
	push	de
	push	hl
	ld	(ix + -3), b
	call	_optix_IntelligentRecursiveSetNeedsRedraw
	ld	b, (ix + -3)
	ld	c, 1
	pop	hl
	pop	hl
BB2_72:
	ld	a, b
	xor	a, c
	bit	0, a
	jq	nz, BB2_74
	ld	iy, (_current_context)
	ld	iy, (iy + 3)
	ld	(iy + 3), 1
BB2_74:
	ld	iy, (ix + 6)
	ld	bc, (iy + 58)
BB2_75:
	ld	de, 0
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB2_79
	ld	iy, (ix + 6)
	ld	de, (iy + 71)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB2_78
	dec	de
	push	de
	pop	bc
BB2_78:
	push	bc
	pop	de
BB2_79:
	ld	iy, (ix + 6)
	ld	(iy + 58), de
	ld	bc, (iy + 62)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB2_81
	ld	bc, (iy + 68)
	push	de
	pop	hl
	call	__irems
	push	hl
	pop	bc
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jq	BB2_83
BB2_81:
	ld	hl, (iy + 65)
	dec	hl
	ld	(ix + -3), bc
	ld	bc, (iy + 68)
	ld	(ix + -6), hl
	ld	(ix + -9), bc
	call	__imulu
	ld	bc, (ix + -3)
	add	hl, bc
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB2_84
	ex	de, hl
	ld	bc, (ix + -9)
	call	__idivs
	ld	de, (ix + -6)
	or	a, a
	sbc	hl, de
	call	__imulu
BB2_83:
	ld	(iy + 62), hl
	ld	(iy + 17), 1
BB2_84:
	ld	sp, ix
	pop	ix
	ret
BB2_85:
	dec	de
	ld	hl, (ix + 6)
	push	hl
	pop	iy
BB2_34:
	ld	(iy + 58), de
	ld	iy, (ix + -6)
	jq	BB2_35
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RenderMenu_default
_optix_RenderMenu_default:
	ld	hl, -176
	call	__frameset
	ld	de, -137
	lea	iy, ix + 0
	add	iy, de
	ld	bc, 0
	lea	hl, ix + -52
	push	ix
	ld	de, -158
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	lea	de, ix + -89
	ld	(ix + -3), bc
	push	ix
	ld	bc, -146
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	lea	de, ix + -98
	push	ix
	ld	bc, -155
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	push	ix
	ld	bc, -164
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	lea	de, iy + 0
	ld	bc, -143
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), de
	ld	de, 46
	push	de
	ld	bc, (ix + -3)
	push	bc
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 37
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -146
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	(ix + -56), 1
	ld	(ix + -55), 1
	ld	bc, -158
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(ix + -98), hl
	ld	bc, -146
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(ix + -95), hl
	ld	hl, 0
	ld	(ix + -92), hl
	ld	hl, 39
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -143
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -155
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(ix + -110), hl
	ld	hl, 2
	push	hl
	ld	bc, -143
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_optix_InitializeWidget
	ld	iy, (ix + 6)
	pop	hl
	pop	hl
	ld	a, (iy + 17)
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	nz, BB3_4
	ld	hl, (iy + 58)
	ld	de, (iy + 74)
	or	a, a
	sbc	hl, de
	jq	z, BB3_3
	ld	a, (iy + 14)
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	nz, BB3_4
BB3_3:
	ld	a, (iy + 61)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB3_41
BB3_4:
	ld	bc, 3
	ld	de, (iy + 62)
	push	de
	pop	hl
	call	__imulu
	ld	(ix + -3), bc
	push	ix
	ld	bc, -152
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	push	ix
	ld	bc, -140
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	bc, (ix + -3)
BB3_5:
	ld	bc, (iy + 65)
	ld	hl, (iy + 68)
	call	__imulu
	ld	(ix + -3), bc
	push	ix
	ld	bc, -149
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	add	hl, de
	ld	bc, (ix + -3)
	push	hl
	pop	bc
	ld	de, -140
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB3_6
	ld	a, (iy + 17)
	ld	l, 1
	xor	a, l
	ld	bc, (iy + 58)
	xor	a, l
	bit	0, a
	ld	de, -140
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	hl, (hl)
	jq	nz, BB3_11
	push	hl
	pop	de
	or	a, a
	sbc	hl, bc
	jq	z, BB3_10
	ld	hl, (iy + 74)
	ld	(ix + -3), bc
	push	ix
	ld	bc, -161
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	push	de
	pop	hl
	push	ix
	ld	bc, -140
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	push	ix
	ld	bc, -161
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	or	a, a
	sbc	hl, de
	ld	bc, -140
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	de, (hl)
	ld	bc, (ix + -3)
	jq	nz, BB3_42
BB3_10:
	ld	a, (iy + 14)
	ld	l, 1
	xor	a, l
	bit	0, a
	ex	de, hl
	jq	nz, BB3_40
BB3_11:
	push	ix
	ld	de, -149
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	ld	de, (iy + 71)
	push	hl
	pop	bc
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	(ix + -3), bc
	ld	bc, -155
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	de, (hl)
	ld	bc, (ix + -3)
	jq	m, BB3_13
	ld	de, 0
BB3_13:
	ld	(ix + -110), de
	push	bc
	pop	hl
	ld	(ix + -3), de
	push	ix
	ld	de, -149
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	or	a, a
	sbc	hl, bc
	ld	a, 0
	ld	de, (ix + -3)
	jq	nz, BB3_15
	ld	a, (iy + 77)
BB3_15:
	ld	(ix + -101), a
	ld	a, (iy + 85)
	ld	(ix + -99), a
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_19
	ld	hl, (iy + 50)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_19
	ld	(ix + -3), de
	push	ix
	ld	de, -152
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, (ix + -3)
	jq	nz, BB3_18
BB3_19:
	ld	hl, 0
	ld	(ix + -20), hl
BB3_20:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_24
	ld	hl, (iy + 53)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_24
	ld	(ix + -3), de
	push	ix
	ld	de, -152
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, (ix + -3)
	jq	nz, BB3_23
BB3_24:
	ld	hl, 0
	ld	(ix + -59), hl
	ex	de, hl
BB3_25:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_31
	ld	de, -149
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	hl, (ix + -20)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	c, 1
	ld	a, c
	jq	nz, BB3_28
	ld	a, 0
BB3_28:
	and	a, 1
	ld	iy, 0
	lea	de, iy + 0
	ld	e, a
	ld	hl, (ix + -59)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, c
	jq	nz, BB3_30
	ld	a, 0
BB3_30:
	and	a, 1
	ld	iyl, a
	add	iy, de
	lea	hl, iy + 0
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	(ix + -3), bc
	ld	bc, -149
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	add	iy, de
	ld	hl, 0
	ld	(iy), hl
	ld	iy, (ix + 6)
	ld	bc, (ix + -3)
BB3_31:
	ld	hl, (iy + 1)
	push	ix
	ld	de, -167
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	bc, (iy + 68)
	ld	de, -140
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	call	__irems
	push	ix
	ld	de, -170
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	hl, (iy + 58)
	push	ix
	ld	de, -161
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ld	de, 0
	ld	e, l
	ld	d, h
	push	de
	pop	hl
	call	__idivs
	push	hl
	pop	iy
	ld	(ix + -3), de
	push	ix
	ld	de, -161
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	inc	hl
	call	__irems
	push	ix
	ld	de, -176
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	push	ix
	ld	de, -173
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	lea	hl, iy + 0
	ld	de, -149
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), bc
	call	__imulu
	push	hl
	pop	bc
	ld	de, (ix + -3)
	ex	de, hl
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	push	ix
	ld	bc, -176
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_33
	ld	iy, 0
BB3_33:
	ld	bc, -173
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	add	iy, de
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	push	ix
	ld	de, -130
	add	ix, de
	ld	(ix + 0), l
	ld	(ix + 1), h
	pop	ix
	lea	hl, iy + 0
	ld	bc, 65535
	call	__iand
	ld	de, -170
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	call	__imulu
	ld	(ix + -3), bc
	push	ix
	ld	bc, -167
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	add	hl, de
	push	ix
	ld	bc, -164
	add	ix, bc
	ld	iy, (ix + 0)
	pop	ix
	ld	(iy + 1), hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 4)
	push	ix
	ld	bc, -167
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	de, (iy + 62)
	or	a, a
	sbc	hl, hl
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	ix
	ld	bc, -140
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	add	hl, de
	ld	bc, (ix + -3)
	push	ix
	ld	de, -149
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	call	__idivs
	push	ix
	ld	de, -170
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, (iy + 65)
	ld	a, (iy + 9)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix + -3), bc
	ld	bc, -173
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, (ix + -3)
	push	de
	pop	bc
	call	__idivs
	push	hl
	pop	iy
	ld	(ix + -3), de
	push	ix
	ld	de, -161
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	push	ix
	ld	de, -149
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	call	__idivs
	push	ix
	ld	de, -161
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, (ix + -3)
	push	de
	pop	bc
	dec	de
	ld	(ix + -3), de
	push	ix
	ld	de, -149
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	lea	hl, iy + 0
	call	__imulu
	push	hl
	pop	bc
	ld	de, -173
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	push	ix
	ld	bc, -161
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
	or	a, a
	sbc	hl, de
	jq	z, BB3_35
	ld	iy, 0
BB3_35:
	ld	bc, -149
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	add	iy, de
	ld	a, iyl
	ld	(ix + -128), a
	lea	hl, iy + 0
	ld	bc, 255
	call	__iand
	ld	de, -170
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	call	__imulu
	ld	(ix + -3), bc
	push	ix
	ld	bc, -167
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	add	hl, de
	push	ix
	ld	de, -133
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, -143
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	bc, (ix + -3)
	call	_optix_RecursiveAlign
	pop	hl
	ld	iy, (ix + 6)
	ld	a, (iy + 14)
	ld	l, 1
	xor	a, l
	bit	0, a
	ld	a, 0
	jq	nz, BB3_39
	ld	de, (iy + 58)
	ld	bc, -140
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	ld	a, 1
	jq	z, BB3_38
	ld	a, 0
BB3_38:
BB3_39:
	and	a, 1
	ld	(ix + -123), a
	ld	hl, (ix + -110)
	push	hl
	call	_optix_RecursiveSetNeedsRedraw
	pop	hl
	ld	hl, (ix + -116)
	ld	bc, -143
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	de
	call	__indcallhl
	ld	iy, (ix + 6)
	pop	hl
	ld	hl, (iy + 62)
	push	ix
	ld	bc, -149
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	bc, -140
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
BB3_40:
	inc	hl
	push	ix
	ld	de, -140
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	bc, 3
	ld	de, -152
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	push	ix
	ld	bc, -152
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	bc, -149
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	jq	BB3_5
BB3_42:
	ex	de, hl
	jq	BB3_40
BB3_18:
	ld	(ix + -20), hl
	ld	bc, -158
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_optix_InitializeTextTransform
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -158
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_optix_InitializeWidget
	ld	iy, (ix + 6)
	pop	hl
	pop	hl
	ld	(ix + -7), 0
	ld	a, (iy + 42)
	ld	(ix + -42), a
	ld	a, (iy + 43)
	ld	(ix + -41), a
	ld	a, (iy + 44)
	ld	(ix + -40), a
	ld	a, (iy + 45)
	ld	(ix + -39), a
	ld	de, (ix + -110)
	jq	BB3_20
BB3_23:
	ld	(ix + -59), hl
	ld	a, (iy + 56)
	ld	(ix + -56), a
	ld	a, (iy + 57)
	ld	(ix + -55), a
	ld	hl, 1
	push	hl
	ld	bc, -146
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_optix_InitializeWidget
	ld	iy, (ix + 6)
	pop	hl
	pop	hl
	ld	a, (iy + 46)
	ld	(ix + -79), a
	ld	a, (iy + 47)
	ld	(ix + -78), a
	ld	a, (iy + 48)
	ld	(ix + -77), a
	ld	a, (iy + 49)
	ld	(ix + -76), a
	ld	hl, (ix + -110)
	jq	BB3_25
BB3_6:
	lea	hl, iy + 0
	ld	iy, (_current_context)
	ld	iy, (iy + 3)
	ld	(iy + 1), 1
	push	hl
	pop	iy
	ld	(iy + 61), 0
BB3_41:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	_optix_CheckTransformOverlap
	extern	_memset
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	_kb_AnyKey
	extern	_optix_InitializeWidget
	extern	__indcallhl
	extern	_optix_IntelligentRecursiveSetNeedsRedraw
	extern	_optix_InitializeTextTransform
	extern	__sand
	extern	_optix_RecursiveAlign
	extern	__idivs
	extern	__setflag
	extern	_current_context
	extern	__Unwind_SjLj_Unregister
	extern	__iand
	extern	__irems
	extern	__imulu
	extern	_optix_RecursiveSetNeedsRedraw
