	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_optix_InitializeCursor
_optix_InitializeCursor:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	de, 1572864
	ld	a, 67
	ld	c, 66
	ld	hl, 0
	ld	(iy + 40), de
	ld	(iy + 43), a
	ld	de, -2097152
	ld	(iy + 44), de
	ld	(iy + 47), c
	ld	(iy + 27), hl
	ld	de, 160
	ld	(iy + 1), de
	ld	de, 120
	ld	(iy + 4), de
	ld.sis	de, 1
	ld	(iy + 7), e
	ld	(iy + 8), d
	ld	(iy + 9), 1
	ld	de, _optix_UpdateCursor_default
	ld	(iy + 24), de
	ld	de, _optix_RenderCursor_default
	ld	(iy + 21), de
	ld	(iy + 15), 1
	ld	(iy + 54), hl
	ld	hl, 4
	ld	(iy + 51), hl
	ld	hl, _malloc
	push	hl
	ld	hl, 16
	push	hl
	push	hl
	call	_gfx_AllocSprite
	pop	de
	pop	de
	pop	de
	ld	iy, (ix + 6)
	ld	(iy + 57), hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_UpdateCursor_default
_optix_UpdateCursor_default:
	ld	hl, -14
	call	__frameset
	ld	iy, (ix + 6)
	ld	de, 4
	ld	hl, (iy + 1)
	ld	(iy + 30), hl
	ld	hl, (iy + 4)
	ld	(iy + 33), hl
	ld	hl, (_current_context)
	push	hl
	pop	bc
	ld	hl, (hl)
	ld	a, (hl)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	z, BB1_9
	ld	(iy + 51), de
	ld	hl, 1
	push	hl
	call	_optix_DefaultKeyIsDown
	pop	hl
	and	a, 1
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB1_3
	ld	iy, (ix + 6)
	or	a, a
	sbc	hl, hl
	ld	(iy + 51), hl
BB1_3:
	ld	hl, 2
	push	hl
	call	_optix_DefaultKeyIsDown
	pop	hl
	and	a, 1
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB1_5
	ld	iy, (ix + 6)
	ld	hl, 1
	ld	(iy + 51), hl
BB1_5:
	ld	hl, 3
	push	hl
	call	_optix_DefaultKeyIsDown
	pop	hl
	and	a, 1
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB1_7
	ld	iy, (ix + 6)
	ld	hl, 2
	ld	(iy + 51), hl
BB1_7:
	ld	hl, 4
	push	hl
	call	_optix_DefaultKeyIsDown
	pop	hl
	and	a, 1
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB1_44
	ld	iy, (ix + 6)
	ld	hl, 3
	ld	(iy + 51), hl
	jq	BB1_44
BB1_9:
	ld	e, 56
	push	bc
	pop	iy
	ld	(ix + -3), iy
	ld	iy, (iy + 3)
	ld	bc, (iy + 4)
	ld	a, (iy + 7)
	call	__ltof
	or	a, a
	sbc	hl, hl
	call	__fmul
	ld	(ix + -9), bc
	ld	(ix + -10), a
	ld	iy, (ix + -3)
	ld	iy, (iy + 9)
	ld	(iy + 48), hl
	inc	hl
	push	hl
	call	_optix_DefaultKeyIsDown
	ld	iy, (ix + 6)
	ld	d, a
	pop	hl
	or	a, a
	lea	hl, iy + 44
	ld	(ix + -6), hl
	jq	z, BB1_11
	ld	hl, (iy + 36)
	ld	e, (iy + 39)
	ld	bc, (iy + 44)
	ld	iy, (ix + -6)
	lea	iy, iy + 3
	ld	a, (iy)
	ld	iy, (ix + 6)
	call	__fsub
	ld	(iy + 44), bc
	ld	(iy + 47), a
BB1_11:
	ld	a, d
	or	a, a
	jq	nz, BB1_13
	ld	a, 0
	jq	BB1_14
BB1_13:
	ld	a, 1
BB1_14:
	ld	(ix + -3), a
	ld	hl, 2
	push	hl
	call	_optix_DefaultKeyIsDown
	pop	hl
	or	a, a
	jq	z, BB1_17
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	bc, (iy + 36)
	ld	a, (iy + 39)
	ld	hl, (iy + 44)
	ld	iy, (ix + -6)
	lea	iy, iy + 3
	ld	e, (iy)
	call	__fadd
	ld	iy, (ix + 6)
	ld	(iy + 44), bc
	ld	(iy + 47), a
	ld	a, 1
	ld	(ix + -3), a
BB1_17:
	ld	hl, 3
	push	hl
	call	_optix_DefaultKeyIsDown
	pop	hl
	or	a, a
	ld	iy, (ix + 6)
	lea	hl, iy + 40
	ld	(ix + -6), hl
	jq	z, BB1_19
	ld	hl, (iy + 36)
	ld	e, (iy + 39)
	ld	bc, (iy + 40)
	ld	iy, (ix + -6)
	lea	iy, iy + 3
	ld	a, (iy)
	ld	iy, (ix + 6)
	call	__fsub
	ld	(iy + 40), bc
	ld	(iy + 43), a
	ld	a, 1
	ld	(ix + -3), a
BB1_19:
	ld	hl, 4
	push	hl
	call	_optix_DefaultKeyIsDown
	pop	hl
	or	a, a
	jq	nz, BB1_22
	ld	a, (ix + -3)
	ld	e, 1
	xor	a, e
	bit	0, a
	jq	nz, BB1_38
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 36)
	ld	(ix + -14), hl
	ld	a, (iy + 39)
	ld	(ix + -3), a
	ld	hl, (iy + 40)
	ld	(ix + -6), hl
	ld	a, (iy + 43)
	ld	(ix + -11), a
	jq	BB1_23
BB1_22:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	bc, (iy + 36)
	ld	a, (iy + 39)
	ld	hl, (iy + 40)
	ld	iy, (ix + -6)
	lea	iy, iy + 3
	ld	e, (iy)
	ld	(ix + -14), bc
	ld	(ix + -3), a
	call	__fadd
	ld	(ix + -6), bc
	ld	iy, (ix + 6)
	ld	(iy + 40), bc
	ld	(ix + -11), a
	ld	(iy + 43), a
BB1_23:
	ld	hl, -6291456
	ld	e, 64
	ld	d, 65
	ld	bc, (ix + -9)
	ld	a, (ix + -10)
	call	__fmul
	ld	hl, (ix + -14)
	ld	e, (ix + -3)
	call	__fadd
	ld	hl, 2097152
	ld	(ix + -3), hl
	ld	e, d
	call	__fcmp
	jq	m, BB1_25
	ld	l, 0
	jq	BB1_26
BB1_25:
	ld	l, 1
BB1_26:
	bit	0, l
	jq	nz, BB1_28
	ld	(ix + -3), bc
BB1_28:
	bit	0, l
	jq	nz, BB1_30
	ld	d, a
BB1_30:
	ld	iy, (ix + 6)
	ld	hl, (ix + -3)
	ld	(iy + 36), hl
	ld	(iy + 39), d
	ld	bc, (ix + -6)
	ld	a, (ix + -11)
	call	__ftol
	push	bc
	pop	hl
	ld	(iy + 1), hl
	ld	bc, (iy + 44)
	ld	a, (iy + 47)
	call	__ftol
	ld	(iy + 4), bc
	ld	(ix + -6), hl
	ld	de, 305
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB1_32
	ld	hl, 304
	ld	(ix + -6), hl
	ld	(iy + 1), hl
BB1_32:
	ld	(ix + -3), bc
	push	bc
	pop	hl
	ld	bc, 225
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB1_34
	ld	hl, 224
	ld	(ix + -3), hl
	ld	(iy + 4), hl
BB1_34:
	ld	de, 0
	ld	hl, (ix + -6)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB1_36
	or	a, a
	sbc	hl, hl
	ld	(iy + 1), hl
BB1_36:
	ld	hl, (ix + -3)
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	e, 1
	ld	bc, 0
	jq	p, BB1_39
	ld	(iy + 4), bc
	jq	BB1_39
BB1_38:
	ld	iy, (_current_context)
	ld	iy, (iy + 9)
	ld	bc, 0
	ld	(iy + 36), bc
	xor	a, a
	ld	(iy + 39), a
	ld	iy, (ix + 6)
BB1_39:
	ld	hl, (iy + 54)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB1_44
	ld	a, (hl)
	cp	a, 5
	jq	nz, BB1_44
	ld	iy, (_current_context)
	ld	iy, (iy + 9)
	ld	iy, (iy + 54)
	ld	a, (iy + 40)
	xor	a, e
	bit	0, a
	jq	nz, BB1_44
	push	bc
	call	_optix_DefaultKeyIsDown
	pop	hl
	cp	a, 4
	jq	z, BB1_44
	ld	iy, (ix + 6)
	ld	(iy + 60), 1
BB1_44:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RenderCursor_default
_optix_RenderCursor_default:
	ld	hl, -67
	call	__frameset
	ld	iy, (ix + 6)
	ld	hl, (iy + 54)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_2
	push	hl
	pop	bc
	inc	hl
	jq	BB2_3
BB2_2:
	push	hl
	pop	bc
	ld	hl, 0
BB2_3:
	ld	(ix + -43), hl
	ld	hl, (_current_context)
	ld	iy, (hl)
	ld	a, (iy)
	ld	e, 1
	xor	a, e
	bit	0, a
	jq	z, BB2_11
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_27
	call	_gfx_GetDraw
	ld	l, a
	ld	(ix + -46), hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetDraw
	pop	hl
	ld	hl, 26
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	iy, (ix + 6)
	ld	iy, (iy + 54)
	ld	a, (iy)
	cp	a, 3
	jq	nz, BB2_20
	ld	de, 159
	lea	bc, iy + 0
	add	iy, de
	ld	a, (iy)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB2_25
	ld	de, 132
	push	bc
	pop	iy
	add	iy, de
	ld	iy, (iy)
	ld	de, -1
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	nz, BB2_10
	ld	de, 148
	push	bc
	pop	iy
	add	iy, de
	ld	iy, (iy)
BB2_10:
	push	bc
	pea	ix + -40
	push	iy
	call	_optix_SetMenuOptionTransform
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + -39)
	ld	de, (ix + -36)
	ld	bc, 0
	push	bc
	pop	hl
	ld	l, (ix + -33)
	ld	h, (ix + -32)
	ld	a, (ix + -31)
	ld	c, a
	push	bc
	push	hl
	push	de
	push	iy
	jq	BB2_24
BB2_11:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_17
	push	bc
	pop	hl
	ld	a, (hl)
	cp	a, 5
	jq	nz, BB2_17
	push	bc
	pop	iy
	ld	(ix + -49), iy
	ld	hl, (iy + 30)
	ld	(ix + -52), hl
	call	_gfx_GetDraw
	ld	l, a
	ld	(ix + -46), hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetDraw
	pop	hl
	ld	hl, 26
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	iy, (ix + -49)
	ld	a, (iy + 40)
	ld	l, 1
	xor	a, l
	bit	0, a
	lea	hl, iy + 0
	jq	nz, BB2_16
	ex	de, hl
	ld	iy, (_current_context)
	ld	iy, (iy + 9)
	ld	hl, (iy + 1)
	lea	bc, iy + 0
	ld	(ix + -55), hl
	push	de
	pop	iy
	ld	hl, (iy + 34)
	ld	(ix + -67), hl
	push	bc
	pop	iy
	ld	hl, (iy + 4)
	ld	(ix + -61), hl
	push	de
	pop	iy
	ld	hl, (iy + 37)
	ld	(ix + -58), hl
	ld	iy, (ix + -52)
	ld	hl, (iy + 1)
	ld	(ix + -49), hl
	ld	hl, (iy + 4)
	ld	(ix + -64), hl
	ld	hl, 1
	push	hl
	call	_gfx_Blit
	pop	hl
	ld	hl, (ix + -67)
	ld	bc, -1
	call	__ixor
	push	hl
	pop	de
	ld	hl, (ix + -55)
	add	hl, de
	ld	de, (ix + -49)
	add	hl, de
	ld	(ix + -55), hl
	ld	iy, (ix + -43)
	ld	a, (iy + 8)
	ld	de, 0
	push	de
	pop	hl
	ld	l, a
	ld	(ix + -49), hl
	ld	hl, (ix + -61)
	ld	bc, (ix + -64)
	add	hl, bc
	ld	iy, (ix + -58)
	ld	bc, (ix + -49)
	add	iy, bc
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	ld	(ix + -58), hl
	ld	iy, (ix + -43)
	ld	c, (iy + 6)
	ld	b, (iy + 7)
	push	de
	pop	hl
	ld	l, c
	ld	h, b
	ld	bc, 2
	add	hl, bc
	push	hl
	pop	bc
	ld	iy, (ix + -52)
	ld	e, (iy + 9)
	ld	hl, (ix + -49)
	inc	hl
	add	hl, de
	push	hl
	push	bc
	ld	hl, (ix + -58)
	push	hl
	ld	hl, (ix + -55)
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB2_16:
	ld	hl, (ix + -46)
	push	hl
	call	_gfx_SetDraw
	pop	hl
	ld	hl, (_current_context)
	ld	iy, (hl)
	ld	e, 1
BB2_17:
	ld	a, (iy + 1)
	xor	a, e
	xor	a, e
	bit	0, a
	ld	hl, (ix + 6)
	push	hl
	call	z, _optix_RefreshCursorBackground
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTransparentColor
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 48)
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	hl, L___const.optix_RenderCursor_default.spr
	add	hl, de
	ld	hl, (hl)
	ld	de, (iy + 1)
	ld	a, (iy + 4)
	ld	c, a
	push	bc
	push	de
	push	hl
	call	_gfx_TransparentSprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 1)
	ld	a, (iy + 4)
	ld	de, 16
	push	de
	push	de
	ld	e, a
	push	de
	push	hl
	ld	hl, 1
	push	hl
	call	_gfx_BlitRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 30)
	ld	a, (iy + 33)
	ld	de, 16
	push	de
	push	de
	ld	e, a
	push	de
	push	hl
	ld	hl, 1
	push	hl
	call	_gfx_BlitRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	jq	BB2_26
BB2_20:
	cp	a, 5
	jq	nz, BB2_22
	ld	hl, (iy + 30)
	ld	(ix + -55), hl
	ld	iy, (ix + -43)
	ld	hl, (iy)
	dec	hl
	ld	(ix + -49), hl
	ld	hl, (iy + 3)
	ld	(ix + -52), hl
	ld	e, (iy + 6)
	ld	d, (iy + 7)
	ld	bc, 0
	push	bc
	pop	hl
	ld	l, e
	ld	h, d
	ld	de, 2
	add	hl, de
	ex	de, hl
	ld	a, (iy + 8)
	push	bc
	pop	hl
	ld	l, a
	ld	iy, (ix + -55)
	ld	c, (iy + 9)
	inc	hl
	add	hl, bc
	push	hl
	push	de
	ld	hl, (ix + -52)
	push	hl
	jq	BB2_23
BB2_22:
	ld	iy, (ix + -43)
	ld	hl, (iy)
	ld	(ix + -49), hl
	ld	de, (iy + 3)
	or	a, a
	sbc	hl, hl
	ld	l, (iy + 6)
	ld	h, (iy + 7)
	ld	a, (iy + 8)
	ld	bc, 0
	ld	c, a
	push	bc
	push	hl
	push	de
BB2_23:
	ld	hl, (ix + -49)
	push	hl
BB2_24:
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB2_25:
	ld	hl, (ix + -46)
	push	hl
	call	_gfx_SetDraw
BB2_26:
	pop	hl
BB2_27:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RefreshCursorBackground
_optix_RefreshCursorBackground:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	hl, (iy + 57)
	ld	de, (iy + 1)
	ld	bc, (iy + 4)
	push	bc
	push	de
	push	hl
	call	_gfx_GetSprite
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RenderCursorBackground
_optix_RenderCursorBackground:
	call	__frameset0
	ld	hl, (_current_context)
	ld	hl, (hl)
	ld	a, (hl)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB4_2
	ld	iy, (ix + 6)
	ld	hl, (iy + 57)
	ld	de, (iy + 30)
	ld	bc, (iy + 33)
	push	bc
	push	de
	push	hl
	call	_gfx_Sprite
	pop	hl
	pop	hl
	pop	hl
BB4_2:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_HandleNearestElement
_optix_HandleNearestElement:
	ld	hl, -6
	call	__frameset
	ld	iy, (_current_context)
	ld	hl, (iy)
	ld	a, (hl)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB5_14
	ld	hl, (iy + 9)
	ld	(ix + -3), hl
	lea	de, iy + 0
	push	hl
	pop	iy
	ld	hl, (iy + 51)
	push	de
	pop	iy
	ld	de, 4
	or	a, a
	sbc	hl, de
	jq	z, BB5_14
	ld	hl, (iy + 15)
	ld	(ix + -6), hl
	push	hl
	call	_optix_GetNumElementsInStack
	pop	de
	ld	de, 0
	ld	e, l
	ld	d, h
	dec	de
	ld	bc, 3
	ex	de, hl
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + -6)
	add	hl, de
	ld	iy, (hl)
	ld	l, (iy)
	ld	a, l
	and	a, -2
	cp	a, 4
	jq	nz, BB5_9
	ld	a, l
	cp	a, 4
	jq	z, BB5_6
	ld	iy, (iy + 30)
BB5_6:
	ld	l, 1
	ld	a, (iy + 42)
	xor	a, l
	bit	0, a
	jq	nz, BB5_9
	ld	hl, (iy + 27)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB5_10
BB5_9:
	ld	iy, (_current_context)
	ld	hl, (iy + 15)
BB5_10:
	ld	iy, (ix + -3)
	ld	bc, (iy + 51)
	ld	(ix + -6), bc
	ld	de, (iy + 54)
	push	hl
	push	de
	push	bc
	call	_optix_FindNearestElement
	pop	de
	pop	de
	pop	de
	ld	de, (ix + -6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB5_12
	push	hl
	call	_optix_SetCurrentSelection
	pop	hl
	ld	iy, (ix + -3)
	ld	de, (iy + 51)
BB5_12:
	ex	de, hl
	ld	de, 4
	or	a, a
	sbc	hl, de
	jq	z, BB5_14
	ld	iy, (_current_context)
	ld	iy, (iy + 3)
	ld	(iy + 1), 1
BB5_14:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_FindNearestElement
_optix_FindNearestElement:
	ld	hl, -27
	call	__frameset
	ld	a, (ix + 6)
	ld	iy, (ix + 9)
	ld	bc, 0
	cp	a, 4
	jq	z, BB6_46
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB6_46
	ld	hl, (ix + 12)
	push	hl
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB6_46
	ld	hl, 0
	ld	(ix + -3), hl
	ld	hl, (_current_context)
	ld	(ix + -9), hl
	lea	hl, iy + 4
	ld	(ix + -15), hl
	inc	iy
	ld	(ix + -18), iy
	ld	(ix + -12), bc
	push	de
	pop	iy
BB6_4:
	ld	de, (iy)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB6_45
	ld	(ix + -6), iy
	ld	iy, (ix + -9)
	ld	iy, (iy + 9)
	ld	bc, (iy + 54)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	push	de
	pop	iy
	jq	z, BB6_8
	ld	a, (iy + 16)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB6_8
	ld	(ix + -21), iy
	ld	a, (iy + 15)
	xor	a, l
	bit	0, a
	jq	z, BB6_9
BB6_8:
	ld	iy, (ix + -6)
BB6_44:
	lea	iy, iy + 3
	jq	BB6_4
BB6_9:
	ld	bc, 0
	ld	a, (ix + 6)
	cp	a, 4
	ld	hl, 0
	jq	nc, BB6_25
	ld	a, (ix + 6)
	ld	c, a
	ld	hl, LJTI6_0
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	ld	iy, (ix + -21)
	lea	de, iy + 4
	ld	(ix + -27), de
	lea	bc, iy + 0
	inc	bc
	jp	(hl)
BB6_11:
	ld	(ix + -27), bc
	ld	bc, (iy + 4)
	ld	iy, (ix + 9)
	ld	de, (iy + 4)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	BB6_20
BB6_12:
	ld	de, (iy + 1)
	ld	iy, (ix + 9)
	ld	bc, (iy + 1)
	push	de
	pop	hl
	push	bc
	pop	iy
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	a, 1
	jq	m, BB6_14
	ld	a, 0
BB6_14:
	ex	de, hl
	lea	de, iy + 0
	or	a, a
	sbc	hl, de
	jq	BB6_15
BB6_16:
	ld	bc, (iy + 1)
	ld	iy, (ix + 9)
	ld	hl, (iy + 1)
	push	hl
	pop	iy
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	a, 1
	jq	m, BB6_18
	ld	a, 0
BB6_18:
	push	bc
	pop	hl
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
BB6_15:
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix + -24), hl
	ld	bc, (ix + -15)
	ld	iy, (ix + -27)
	jq	BB6_23
BB6_19:
	ld	(ix + -27), bc
	ld	bc, (iy + 4)
	ld	iy, (ix + 9)
	ld	de, (iy + 4)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
BB6_20:
	call	__setflag
	ld	a, 1
	jq	m, BB6_22
	ld	a, 0
BB6_22:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix + -24), hl
	ld	iy, (ix + -27)
	ld	bc, (ix + -18)
BB6_23:
	ld	hl, (iy)
	push	bc
	pop	iy
	ld	bc, (iy)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	de, (ix + -24)
	add	hl, de
	bit	0, a
	jq	nz, BB6_25
	or	a, a
	sbc	hl, hl
BB6_25:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	e, 1
	push	hl
	pop	bc
	jq	nz, BB6_27
	ld	e, 0
BB6_27:
	ld	hl, (ix + -12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 1
	ld	iy, (ix + -6)
	jq	nz, BB6_29
	ld	a, 0
BB6_29:
	ld	(ix + -24), a
	and	a, e
	ld	hl, (ix + -12)
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	l, 1
	jq	m, BB6_31
	ld	l, 0
BB6_31:
	ld	(ix + -27), l
	ld	hl, (ix + -12)
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	l, 1
	jq	p, BB6_33
	ld	l, 0
BB6_33:
	and	a, l
	ld	d, a
	ld	hl, (ix + -12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 1
	jq	z, BB6_35
	ld	a, 0
BB6_35:
	and	a, e
	or	a, d
	bit	0, a
	jq	nz, BB6_37
	ld	hl, (ix + -3)
	ld	(ix + -21), hl
BB6_37:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, 1
	jq	z, BB6_39
	ld	l, 0
BB6_39:
	ld	a, (ix + -27)
	or	a, l
	ld	d, a
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	l, 1
	jq	z, BB6_41
	ld	l, 0
BB6_41:
	ld	a, (ix + -24)
	or	a, l
	ld	l, a
	ld	a, d
	and	a, l
	bit	0, a
	jq	nz, BB6_43
	ld	(ix + -12), bc
BB6_43:
	ld	hl, (ix + -21)
	ld	(ix + -3), hl
	jq	BB6_44
BB6_45:
	ld	iy, (ix + -3)
BB6_46:
	lea	hl, iy + 0
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI6_0:
	private	LJTI6_0
LJTI6_0:
	dl	BB6_11
	dl	BB6_19
	dl	BB6_12
	dl	BB6_16

	section	.text,"ax",@progbits
	public	_optix_SetCurrentSelection
_optix_SetCurrentSelection:
	ld	hl, -3
	call	__frameset
	ld	de, (ix + 6)
	ld	iy, (_current_context)
	ld	(ix + -3), iy
	ld	iy, (iy + 9)
	lea	bc, iy + 0
	ld	iy, (iy + 54)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB7_2
	ld	(iy + 14), 0
BB7_2:
	push	de
	pop	hl
	push	bc
	pop	iy
	ld	(iy + 54), hl
	push	de
	pop	iy
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB7_5
	ld	(iy + 14), 1
	ld	hl, (ix + -3)
	ld	hl, (hl)
	ld	a, (hl)
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	nz, BB7_5
	ld	hl, (iy + 1)
	lea	de, iy + 0
	push	bc
	pop	iy
	ld	(iy + 1), hl
	push	de
	pop	iy
	ld	hl, (iy + 4)
	push	bc
	pop	iy
	ld	(iy + 4), hl
BB7_5:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_GetCurrentSelection
_optix_GetCurrentSelection:
	ld	hl, -9
	call	__frameset
	ld	de, 0
	or	a, a
	sbc	hl, hl
	ld	bc, 3
	ld	a, 1
	ld	(ix + -9), de
BB8_1:
	push	hl
	pop	de
	inc	de
	ld	(ix + -6), de
	call	__imulu
	push	hl
	pop	de
	ld	bc, (ix + 6)
	push	bc
	pop	hl
	add	hl, de
	ld	(ix + -3), hl
	push	bc
	pop	de
BB8_2:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB8_17
	ld	hl, (ix + -3)
	ld	hl, (hl)
	push	hl
	pop	bc
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB8_18
	ld	l, a
	push	bc
	pop	iy
	ld	a, (iy + 16)
	xor	a, l
	xor	a, l
	bit	0, a
	jq	nz, BB8_6
	ld	bc, (ix + -6)
	inc	bc
	ld	(ix + -6), bc
	ld	iy, (ix + -3)
	lea	iy, iy + 3
	ld	(ix + -3), iy
	ld	a, l
	jq	BB8_2
BB8_6:
	ld	iy, (_current_context)
	ld	de, (iy + 9)
	push	bc
	push	de
	call	_optix_CheckTransformOverlap
	pop	hl
	pop	hl
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB8_16
	ld	hl, (ix + -3)
	ld	iy, (hl)
	ld	hl, (iy + 27)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	ld	hl, (ix + -9)
	call	nz, _optix_GetCurrentSelection
	pop	de
	ld	(ix + -9), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, 3
	jq	nz, BB8_11
	ld	hl, (ix + -3)
	ld	hl, (hl)
	ld	(ix + -9), hl
	jq	BB8_11
BB8_16:
	ld	bc, 3
BB8_11:
	ld	hl, (ix + -3)
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, 5
	ld	de, (ix + -6)
	push	de
	pop	hl
	ld	a, 1
	jq	nz, BB8_1
	ld	bc, (iy + 30)
	ld	iy, (_current_context)
	ld	hl, (iy + 9)
	ld	(ix + -3), bc
	push	bc
	push	hl
	ld	(ix + -6), de
	call	_optix_CheckTransformOverlap
	ld	de, (ix + -6)
	ld	bc, 3
	pop	hl
	pop	hl
	ld	l, 1
	xor	a, l
	bit	0, a
	ld	a, 1
	push	de
	pop	hl
	jq	nz, BB8_1
	ld	iy, (ix + -3)
	ld	a, (iy + 42)
	ld	l, 1
	xor	a, l
	bit	0, a
	ld	a, 1
	ld	(ix + -9), iy
	ex	de, hl
	jq	nz, BB8_1
	ld	iy, (ix + -3)
	ld	hl, (iy + 27)
	push	hl
	call	_optix_GetCurrentSelection
	ld	a, 1
	ld	bc, 3
	ld	(ix + -9), hl
	pop	hl
	ld	hl, (ix + -6)
	jq	BB8_1
BB8_17:
	ld	hl, 0
	jq	BB8_15
BB8_18:
	ld	hl, (ix + -9)
BB8_15:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.rodata,"a",@progbits
	private	L___const.optix_RenderCursor_default.spr
L___const.optix_RenderCursor_default.spr:
	dl	_cursor_normal_data
	dl	_cursor_pointer_data
	dl	_cursor_move_data
	dl	_cursor_resize_horizontal_data
	dl	_cursor_resize_vertical_data
	dl	_cursor_text_data
	dl	_cursor_text_upper_data
	dl	_cursor_text_lower_data
	dl	_cursor_text_math_data

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	_gfx_BlitRectangle
	extern	_optix_CheckTransformOverlap
	extern	_cursor_resize_vertical_data
	extern	_optix_SetMenuOptionTransform
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	_malloc
	extern	_gfx_SetTransparentColor
	extern	__fadd
	extern	_cursor_pointer_data
	extern	_cursor_text_math_data
	extern	_cursor_resize_horizontal_data
	extern	_gfx_GetSprite
	extern	_gfx_GetDraw
	extern	__fmul
	extern	__ftol
	extern	_gfx_SetDraw
	extern	_cursor_text_lower_data
	extern	__setflag
	extern	_cursor_text_upper_data
	extern	_current_context
	extern	__Unwind_SjLj_Unregister
	extern	_gfx_Blit
	extern	__ixor
	extern	_gfx_AllocSprite
	extern	__imulu
	extern	_optix_GetNumElementsInStack
	extern	_gfx_SetColor
	extern	_cursor_move_data
	extern	_gfx_Rectangle
	extern	_gfx_Sprite
	extern	__ltof
	extern	_cursor_normal_data
	extern	_gfx_TransparentSprite_NoClip
	extern	_optix_DefaultKeyIsDown
	extern	__fcmp
	extern	__frameset0
	extern	__fsub
	extern	_cursor_text_data
